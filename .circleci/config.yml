version: 2.1

# Docker environment.
defaults: &defaults
  working_directory: /go/src/github.com/networkservicemesh/examples
  docker:
    - image: mmatache/kind_runner:latest
  environment:
    GOPATH: /go

e2e-kind-test: &e2e-kind-test
  resource_class: large
  steps:
    - setup_remote_docker
    - checkout:
        path: /go/src/github.com/networkservicemesh/examples
    - run:
        name: Clone networkservicemesh
        working_directory: /go/src/github.com/networkservicemesh
        command: |
          git clone https://github.com/networkservicemesh/networkservicemesh.git
    - attach_workspace:
        at: /go/src/_save
    - run:
        name: Start KinD Clusters
        command: |
          mkdir -p kubeconfigs
          kind create cluster --name cl1 --kubeconfig=kubeconfigs/config
          kind create cluster --name cl2 --kubeconfig=kubeconfigs/config
    - run:
        name: Restore built images
        command: |
          for cluster in cl1 cl2; do
            kind load image-archive --name $cluster /go/src/_save/images.tar
          done

    - run:
        name: Build NSE runner container
        working_directory: /go/src/github.com/networkservicemesh
        command: |
          docker build -t kiknos_nse:latest -f examples/examples/ucnf-kiknos/Dockerfile.runner .

    - run:
        name: Install VPN components
        command: |
          docker run --name=nse_install --network=host -t kiknos_nse:latest \
          bash -c "/go/src/github.com/networkservicemesh/examples/examples/ucnf-kiknos/scripts/start_topo.sh --clusters_present --tag=${CIRCLE_SHA1}"

    - run:
        name: Run Direct VPN test
        command: |
          docker run --name=nse_run --network=host -t kiknos_nse:latest \
           bash -c "/go/src/github.com/networkservicemesh/examples/examples/ucnf-kiknos/scripts/test_vpn_conn.sh"

    - run:
        name: Run Istio VPN test
        command: |
          docker run --name=nse_run_istio --network=host -t kiknos_nse:latest \
           bash -c "/go/src/github.com/networkservicemesh/examples/examples/ucnf-kiknos/scripts/test_istio_vpn_conn.sh"

    - run:
        name: Dump clusters state
        when: always
        command: |
          mkdir -p /tmp/cluster_state
          docker run --name=nse_dump --network=host -t kiknos_nse:latest \
           bash -c "/go/src/github.com/networkservicemesh/examples/examples/ucnf-kiknos/scripts/dump_clusters_state.sh"
          docker logs nse_dump > /tmp/cluster_state/nse_dump.txt

    - store_artifacts:
        path: /tmp/cluster_state

jobs:
  build-kiknos-nse:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Clone networkservicemesh
          working_directory: /go/src/github.com/networkservicemesh
          command: |
            git clone https://github.com/networkservicemesh/networkservicemesh.git
      - run:
          name: Build docker images
          working_directory: /go/src/github.com/networkservicemesh/examples
          command: |
            VPP_AGENT=ciscolabs/kiknos:latest ORG=mmatache TAG=${CIRCLE_SHA1} make k8s-universal-cnf-save
            images_to_save+=("mmatache/universal-cnf-vppagent:${CIRCLE_SHA1}")
            mkdir -p _save
            docker save "${images_to_save[@]}" >_save/images.tar
      - persist_to_workspace:
          root: _save
          paths:
            - images.tar

  sanity-check:
    resource_class: large
    working_directory: ~/project/examples
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run:
          name:
          command: |
            sudo apt-get install yamllint python3-pkg-resources
      - run: yamllint -c .yamllint.yml $(git ls-files '*.yaml' '*.yml')
      - run:
          name: Install golangci-lint
          command: |
            export GOLANGCI_LINT_VER=1.20.1
            wget https://github.com/golangci/golangci-lint/releases/download/v${GOLANGCI_LINT_VER}/golangci-lint-${GOLANGCI_LINT_VER}-linux-amd64.tar.gz
            tar -xvf golangci-lint-${GOLANGCI_LINT_VER}-linux-amd64.tar.gz
            sudo mv golangci-lint-${GOLANGCI_LINT_VER}-linux-amd64/golangci-lint /usr/local/bin/
      - run:
          name: Lint examples
          command: |
            make lint-all
    environment:
      GO111MODULE: "on"

  build:
    working_directory: ~/project/examples
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            make build-all

  push:
    parameters:
      example:
        type: string
      org:
        type: string
      tag:
        type: string
    working_directory: ~/project/examples
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Push << parameters.example >> containers with tag << parameters.tag >>
          command: |
            ORG=<< parameters.org >> TAG=<< parameters.tag >> make k8s-<< parameters.example >>-push

  push-all:
    parameters:
      org:
        type: string
      tag:
        type: string
    working_directory: ~/project/examples
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Push all containers with tag << parameters.tag >>
          command: |
            ORG=<< parameters.org >> TAG=<< parameters.tag >> make push-all

  test:
    parameters:
      example:
        type: string
      description:
        type: string
      nsmbranch:
        type: string
        default: "master"
      nightly:
        type: string
        default: "false"
    machine:
      enabled: true
      docker_layer_caching: true
    working_directory: ~/project/examples
    steps:
      - run:
          name: Update go to 1.13
          working_directory: /tmp
          command: |
            wget https://dl.google.com/go/go1.13.linux-amd64.tar.gz
            sudo rm -rf /usr/local/go
            sudo tar -C /usr/local -xzf go1.13.linux-amd64.tar.gz
      - run:
          name: Install kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
      - run:
          name: Install kind
          command: |
            GO111MODULE="on" go get sigs.k8s.io/kind@master
            kind version
      - checkout
      - run:
          name: Patch go.mod
          command: |
            if [ "<< parameters.nightly >>" == "true" ]; then
               ./scripts/update_networkservicemesh.sh master # Update to the master branch
            fi
      - run:
          name: Clone NSM
          command: |
            git clone --single-branch --branch << parameters.nsmbranch >> https://github.com/networkservicemesh/networkservicemesh.git ../networkservicemesh
      - run:
          name: Start kind
          command: |
            make kind-start
            kubectl config use-context kind-nsm
      - run:
          name: Wait for kind to settle
          command: |
            kubectl wait -n kube-system --timeout=150s --for condition=Ready --all pods
      - helm/install-helm-client
      - helm/install-helm-on-cluster:
          enable-cluster-wide-admin-access: true
      - helm/install-helm-chart:
          chart: "../networkservicemesh/deployments/helm/nsm"
          values-to-override: |
            "org=networkservicemesh,tag=<< parameters.nsmbranch >>,admission-webhook.org=networkservicemesh,admission-webhook.tag=<< parameters.nsmbranch >>,spire.enabled=false,insecure=true"
      - run:
          name: Build << parameters.example >> images
          command: |
            make k8s-<< parameters.example >>-save
      - run:
          name: << parameters.description >> deploy
          command: |
            make k8s-<< parameters.example >>-load-images k8s-<< parameters.example >>-deploy
            kubectl wait -n default --timeout=150s --for condition=Ready --all pods
      - run:
          name: << parameters.description >> check
          command: |
            make k8s-<< parameters.example >>-check
      - run:
          name: << parameters.description >> delete
          command: |
            make k8s-<< parameters.example >>-delete
      - run:
          name: Dump cluster state
          when: always
          command: |
            kubectl get nodes --all-namespaces
            kubectl get pods -o wide --all-namespaces
            kubectl describe pods --all-namespaces

  e2e-kind-integration:
    <<: *defaults
    <<: *e2e-kind-test

orbs:
  helm: circleci/helm@0.2.1
workflows:
  version: 2
  test-and-push:
    jobs:
      - build-kiknos-nse
      - e2e-kind-integration:
          requires:
            - build-kiknos-nse